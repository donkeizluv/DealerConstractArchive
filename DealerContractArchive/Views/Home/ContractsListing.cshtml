<template id="contracts-listing-template">
        <div>
            <!--pops up modal-->
            <printdocument-modal v-if="ShowDocumentModal"
                                 v-on:close="ShowDocumentModal = false"
                                 v-bind:docnames="DocumentNames"
                                 v-bind:contractid="ShowDocumentForId">
            </printdocument-modal>
            <newcontract-modal v-if="ShowAddContractModal"
                               v-on:close="ShowAddContractModal = false">
            </newcontract-modal>
            <upload-modal v-if="ShowUploadModal"
                          v-on:close="OnCloseUploadModal"
                          v-bind:contractid="UploadToContractId">
            </upload-modal>
            <!--search bar-->
            @*make this a component*@
            <div class="row">
                <div class="pull-left" style="padding-left: 20px">
                    <button v-show="!readonly" v-on:click="AddNewContractClicked" class="btn btn-sm"><span class="glyphicon glyphicon-plus"></span> </button>
                </div>
                @*search component*@
                <search-bar v-on:searchclicked="SearchButtonClicked"></search-bar>
            </div>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <td><h4>#</h4></td>
                            <td><h4>Name</h4></td>
                            <td><h4>Address</h4></td>
                            <td><h4>Tax Id</h4></td>
                            <td><h4>Commision</h4></td>
                            <td><h4>Scanned</h4></td>
                            <td><h4>Effective</h4></td>
                            <td><h4>Added By</h4></td>
                            <td><h4>Document</h4></td>
                        </tr>
                    </thead>
                    <tbody>
                        @*how to click row*@
                        @*<tr v-for="contract in Contracts" class="row" v-on:click="DataRowClicked(contract)">*@
                        <tr v-for="contract in ContractModels">
                            <td>{{contract.ContractId}}</td>
                            <td>{{contract.Name}}</td>
                            <td>{{contract.Address}}</td>
                            <td>{{contract.TaxId}}</td>
                            <td>{{contract.Commission}}</td>
                            <td>
                                @*can use asp here instead of vue :/
                            pro using asp: more secure (no cookie lag on changing user Role)
                            con: maybe more coupled btw controller and View

                            @*upload scan modal button*@
                                <div v-if="!readonly && contract.ScannedContractUrl == null">
                                    <button v-on:click="ShowUploadModalHandler(contract.ContractId)" class="btn-link">
                                        <span class="glyphicon glyphicon-arrow-up"></span>
                                    </button>
                                </div>
                                @*show scan button*@
                                <div v-else-if="contract.ScannedContractUrl != null">
                                    <button v-on:click="OpenNewScanPage(contract.ContractId)" class="btn-link">
                                        <span class="glyphicon glyphicon-eye-open"></span>
                                    </button>
                                </div>
                                @*readonly*@
                                <div v-else>
                                    <span>...</span>
                                </div>
                            </td>
                            <td>
                                <div class="text-success" v-if=contract.Effective>Yes</div>
                                <div class="text-danger" v-else>No</div>
                            </td>
                            <td>{{contract.Username}}</td>
                            <td>
                                @*show document selector modal*@
                                <button v-on:click="PrinDocumentModalHandler(contract.ContractId)" class="btn-link">
                                    <span class="glyphicon glyphicon-print"></span>
                                </button>
                            </td>
                        </tr>
                    </tbody>
                </table>

                @*make this a component*@
                @*pagination*@
                <div class="row">
                    <ul class="pagination pagination-sm">
                        @*goes to first*@
                        <li v-if="OnPage == 1" class="disabled">
                            <button class="btn btn-default" disabled="">&laquo;</button>
                        </li>
                        <li v-else>
                            <button class="btn btn-default" type="button" v-on:click="PageNavClicked(1)">&laquo;</button>
                        </li>
                        @*page number*@
                        <li v-for="index in TotalPages">
                            @*<router-link v-bind:to="GetSearchQueryRoute">{{index}}</router-link>*@
                            <button v-bind:class="[index == OnPage ? 'btn btn-primary' : 'btn btn-default']"
                                    type="button"
                                    v-on:click="PageNavClicked(index)">
                                {{index}}
                            </button>
                        </li>
                        @*goes to last*@
                        <li v-if="OnPage == TotalPages" class="disabled">
                            <button class="btn btn-default" disabled="">&raquo;</button>
                        </li>
                        <li v-else>
                            <button class="btn btn-default" type="button" v-on:click="PageNavClicked(TotalPages)">&raquo;</button>
                        </li>
                    </ul>
                </div>
                <div class="row">
                    <div><span>Total Records: {{TotalRows}}</span></div>
                </div>
            </div>
</template>
<script>
    var ContractsListing = {
        name: 'ContractsListing',
        template: '#contracts-listing-template',
        mounted: function () {
            this.Innit();
        },

        //if need of call modal globally arises
        //global resgister
        //Vue.component('upload', Upload)
        components: {
            'search-bar': SearchBar,
            'newcontract-modal': NewContractModal,
            'upload-modal': UploadModal,
            'printdocument-modal': PrintDocumentModal
        },

        props: ['readonly'],

        data: function () {
            return {
                //search related
                //if we keep SearchModel here and ref this.SearchModel to SearchBar's SearchModel
                //it will keep sync the values even though not clicking "search"
                //so just store values instead of the object
                //maybe change the values name to advoid confusing?
                SearchString: "",
                SelectedFilterValue: 2,

                //listing, nav
                ContractViewerModel: [],
                ContractModels: [],
                TotalRows: 0,
                TotalPages: 0,
                OnPage: 0,
                DocumentNames: [],

                //modals
                ShowAddContractModal: false,
                ShowUploadModal: false,
                ShowDocumentModal: false,
                UploadToContractId: -1,
                ShowDocumentForId: -1
            };
        },
        computed: {
            HasFilter: function () {
                var type = this.$data.SelectedFilterValue;
                var contains = this.$data.SearchString;
                if (type !== undefined && contains.length > 0) {
                    return true;
                }
                return false;
            },

            ContractsListingApiPrefix: function () {
                return CurrentHost + GetContractsListApiUrl;
            },

            GetCurrentContractsListingApi: function () {
                var page = this.$data.OnPage;
                if (page < 1 || page == null) page = 1;
                var type = this.$data.SelectedFilterValue;
                var contains = this.$data.SearchString;
                var apiSuffix = "page=" + page;
                apiSuffix = apiSuffix + "&filter=" + this.HasFilter;
                if (this.HasFilter) {
                    this.$data.SelectedFilterValue = type;
                    this.$data.SearchString = contains;
                    apiSuffix = apiSuffix + "&type=" + type + "&contains=" + contains;
                }
                return this.ContractsListingApiPrefix + apiSuffix;
            }
        },
        //notify router changes
        watch: {
            $route: function (to, from) {
                //console.log(to);
                //updates on back key
                this.$data.SearchString = to.query.contains;
                this.$data.SelectedFilterValue = to.query.type;
                this.$data.OnPage = to.query.page;
                this.LoadContracts(this.GetCurrentContractsListingApi);
            }
        },
        methods: {
            //innit app
            Innit: function () {
                //restore page on pasted link
                //var page = router.history.current.params.page;
                var page = router.history.current.query.page;
                if (page < 1 || page == null) page = 1;
                var type = router.history.current.query.type;
                if (type == undefined)
                    type = 2; //default select filter: Name
                var contains = router.history.current.query.contains;
                if (contains == undefined)
                    contains = "";
                //restores
                this.$data.OnPage = page;
                this.$data.SearchString = contains;
                this.$data.SelectedFilterValue = type;
                this.LoadContracts(this.GetCurrentContractsListingApi);
            },
            //load contracts on startup
            //loading animation?
            LoadContracts: function (url) {
                var that = this;
                //that.$data.IsLoading = true; //way too fast to show loading animation, causes jerking in UI
                //console.log(url);
                axios.get(url)
                    .then(function (response) {
                        that.$data.ContractViewerModel = response.data;
                        that.$data.ContractModels = response.data.ContractModels;
                        that.$data.DocumentNames = response.data.DocumentNames;
                        that.UpdatePagination();
                    })
                    .catch(function (error) {
                        console.log(error);
                        console.log("Failed to fetch model"); //display this somehow...
                    });
            },

            //update paging
            UpdatePagination: function () {
                this.$data.TotalPages = this.$data.ContractViewerModel.TotalPages;
                this.$data.TotalRows = this.$data.ContractViewerModel.TotalRows;
            },

            //add new row btn clicked
            AddNewContractClicked: function () {
                this.$data.ShowAddContractModal = true;
            },
            //open new tab show scan
            OpenNewScanPage: function (id) {
                var url = CurrentHost + GetScanPdfApiUrl.replace("{id}", id);
                //console.log(url);
                window.open(url);
            },

            ShowUploadModalHandler: function (id) {
                this.$data.ShowUploadModal = true;
                this.$data.UploadToContractId = id;
            },
            PrinDocumentModalHandler: function (id) {
                this.$data.ShowDocumentModal = true;
                this.$data.ShowDocumentForId = id;
            },
            OnCloseUploadModal: function () {
                this.$data.ShowUploadModal = false;
                this.LoadContracts(this.GetCurrentContractsListingApi);
            },

            SearchButtonClicked: function (searchModel) {
                //back to page 1 on search
                this.$data.SelectedFilterValue = searchModel.SelectedFilterValue;
                this.$data.SearchString = searchModel.SearchString;
                this.$data.OnPage = 1;
                //this will trigger route watch
                router.push({ name: 'Index', query: this.GetSearchQuery(1) });

            },
            PageNavClicked: function (page) {
                ////router.push({ path: `${page}/${type}/${contains}` })
                this.$data.OnPage = page;
                router.push({ name: 'Index', query: this.GetSearchQuery(page) });

            },

            GetSearchQuery: function (pageNumber) {
                return {
                    page: pageNumber,
                    filter: this.HasFilter,
                    type: this.$data.SelectedFilterValue,
                    contains: this.$data.SearchString
                };
            }
        }
    };
</script>
